using UnityEngine;
using System.Collections.Generic;

public class Player : MonoBehaviour
{
    [Header("Player Settings")]
    public int playerID = 1;
    public Color playerColor = Color.red;

    [Header("Movement")]
    public float moveSpeed = 2f;

    private Vector2Int currentGridPos;
    private Vector2Int targetGridPos;
    private List<Vector2Int> plannedPath = new List<Vector2Int>();
    private bool isMoving = false;

    void Start()
    {
        // 현재 월드 위치를 그리드 좌표로 변환
        currentGridPos = GridManager.Instance.WorldToGrid(transform.position);
        targetGridPos = currentGridPos;

        // 정확한 그리드 위치로 스냅
        transform.position = GridManager.Instance.GridToWorld(currentGridPos);

        // 플레이어 색상 설정
        GetComponent<SpriteRenderer>().color = playerColor;
    }

    void Update()
    {
        // 이동 중이면 부드럽게 이동
        if (isMoving)
        {
            Vector3 targetWorldPos = GridManager.Instance.GridToWorld(targetGridPos);

            // MoveTowards 대신 Lerp로 변경 (성능 개선)
            transform.position = Vector3.MoveTowards(transform.position, targetWorldPos, moveSpeed * Time.deltaTime);

            // 거리 계산 최적화 (sqrMagnitude 사용)
            if ((transform.position - targetWorldPos).sqrMagnitude < 0.0001f)
            {
                transform.position = targetWorldPos;
                currentGridPos = targetGridPos;
                isMoving = false;

                Debug.Log($"Player {playerID} reached position: {currentGridPos}");

                // 다음 경로가 있으면 계속 이동
                if (plannedPath.Count > 0)
                {
                    MoveToNextPosition();
                }
                else
                {
                    Debug.Log($"Player {playerID} finished moving!");
                }
            }
        }
    }

    // 경로 설정
    public void SetPath(List<Vector2Int> path)
    {
        plannedPath = new List<Vector2Int>(path);
    }

    // 이동 시작
    public void StartMoving()
    {
        if (plannedPath.Count > 0 && !isMoving)
        {
            MoveToNextPosition();
        }
    }

    // 다음 위치로 이동
    private void MoveToNextPosition()
    {
        if (plannedPath.Count > 0)
        {
            targetGridPos = plannedPath[0];
            plannedPath.RemoveAt(0);
            isMoving = true;
        }
    }

    // 현재 그리드 위치 반환
    public Vector2Int GetGridPosition()
    {
        return currentGridPos;
    }

    // 이동 중인지 확인
    public bool IsMoving()
    {
        return isMoving;
    }

    // 경로 초기화
    public void ClearPath()
    {
        plannedPath.Clear();
        isMoving = false;
    }
}using UnityEngine;
using System.Collections.Generic;

public class PathInput : MonoBehaviour
{
    [Header("Input Settings")]
    public LayerMask playerLayerMask = -1;

    private Player selectedPlayer = null;
    private Dictionary<Player, List<Vector2Int>> playerPaths = new Dictionary<Player, List<Vector2Int>>();
    private List<Vector2Int> currentPath = new List<Vector2Int>();
    private Camera mainCamera;

    void Start()
    {
        mainCamera = Camera.main;

        // Dictionary 용량 미리 할당 (가비지 컬렉션 최적화)
        playerPaths = new Dictionary<Player, List<Vector2Int>>(4);

        // 모든 플레이어 초기화
        Player[] allPlayers = FindObjectsByType<Player>(FindObjectsSortMode.None);
        foreach (Player player in allPlayers)
        {
            playerPaths[player] = new List<Vector2Int>(10); // 경로 용량 미리 할당
        }
    }

    void Update()
    {
        HandleInput();
    }

    void HandleInput()
    {
        // 마우스/터치 입력 처리 (에디터에서는 마우스, 모바일에서는 터치)
        if (Input.GetMouseButtonDown(0))
        {
            Vector3 worldPos = GetWorldPosition();
            HandleTouch(worldPos);
        }
    }

    Vector3 GetWorldPosition()
    {
        Vector3 screenPos = Input.mousePosition;
        screenPos.z = 10f; // 카메라와의 거리
        return mainCamera.ScreenToWorldPoint(screenPos);
    }

    void HandleTouch(Vector3 worldPos)
    {
        // 1. 플레이어 선택 확인
        Collider2D hitCollider = Physics2D.OverlapPoint(worldPos, playerLayerMask);

        if (hitCollider != null)
        {
            Player player = hitCollider.GetComponent<Player>();
            if (player != null)
            {
                SelectPlayer(player);
                return;
            }
        }

        // 2. 경로 설정 (플레이어가 선택된 상태)
        if (selectedPlayer != null)
        {
            Vector2Int gridPos = GridManager.Instance.WorldToGrid(worldPos);

            // 유효한 그리드 위치인지 확인
            if (GridManager.Instance.IsValidGridPosition(gridPos))
            {
                AddToPath(gridPos);
            }
        }
    }

    void SelectPlayer(Player player)
    {
        selectedPlayer = player;

        // 해당 플레이어의 기존 경로 가져오기 (있다면)
        if (playerPaths.ContainsKey(player))
        {
            currentPath = new List<Vector2Int>(playerPaths[player]);
        }
        else
        {
            currentPath = new List<Vector2Int>();
            playerPaths[player] = currentPath;
        }

        // 현재 위치가 경로에 없으면 추가
        Vector2Int currentPos = player.GetGridPosition();
        if (currentPath.Count == 0)
        {
            currentPath.Add(currentPos);
        }

        Debug.Log($"Player {selectedPlayer.playerID} selected");
    }

    void AddToPath(Vector2Int gridPos)
    {
        // 같은 위치 중복 방지
        if (currentPath.Count > 0 && currentPath[currentPath.Count - 1] == gridPos)
        {
            return;
        }

        currentPath.Add(gridPos);

        // 딕셔너리에도 저장
        if (selectedPlayer != null && playerPaths.ContainsKey(selectedPlayer))
        {
            playerPaths[selectedPlayer] = new List<Vector2Int>(currentPath);
        }

        Debug.Log($"Path point added: {gridPos}, Total points: {currentPath.Count}");
    }

    // 시뮬레이션 시작 (스페이스바로 테스트)
    void LateUpdate()
    {
        if (Input.GetKeyDown(KeyCode.Space))
        {
            StartSimulation();
        }
    }
    void StartSimulation()
    {
        // 모든 플레이어에게 각자의 경로 설정
        foreach (var kvp in playerPaths)
        {
            Player player = kvp.Key;
            List<Vector2Int> fullPath = kvp.Value;

            if (fullPath.Count > 1) // 시작점 외에 경로가 있으면
            {
                List<Vector2Int> playerPath = new List<Vector2Int>(fullPath);
                playerPath.RemoveAt(0); // 현재 위치 제거

                player.SetPath(playerPath);
                player.StartMoving();
            }
        }

        Debug.Log("Simulation started for all players!");
    }
}using UnityEngine;

public class GridManager : MonoBehaviour
{
    [Header("Grid Settings")]
    public int gridWidth = 6;
    public int gridHeight = 12;
    public float cellSize = 1f;

    [Header("Grid Center")]
    public Vector3 gridCenter = new Vector3(2.5f, 5.5f, 0f);

    private static GridManager instance;
    public static GridManager Instance { get { return instance; } }

    void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }

    // 월드 좌표를 그리드 좌표로 변환
    public Vector2Int WorldToGrid(Vector3 worldPos)
    {
        Vector3 gridPos = worldPos - gridCenter + new Vector3(gridWidth * cellSize / 2f, gridHeight * cellSize / 2f, 0f);
        int x = Mathf.FloorToInt(gridPos.x / cellSize);
        int y = Mathf.FloorToInt(gridPos.y / cellSize);
        return new Vector2Int(x, y);
    }

    // 그리드 좌표를 월드 좌표로 변환
    public Vector3 GridToWorld(Vector2Int gridPos)
    {
        float x = gridCenter.x - (gridWidth * cellSize / 2f) + (gridPos.x + 0.5f) * cellSize;
        float y = gridCenter.y - (gridHeight * cellSize / 2f) + (gridPos.y + 0.5f) * cellSize;
        return new Vector3(x, y, 0f);
    }

    // 그리드 범위 내인지 확인
    public bool IsValidGridPosition(Vector2Int gridPos)
    {
        return gridPos.x >= 0 && gridPos.x < gridWidth &&
               gridPos.y >= 0 && gridPos.y < gridHeight;
    }

    // 디버그용 그리드 그리기
#if UNITY_EDITOR
    void OnDrawGizmos()
    {
        // 선택된 상태에서만 그리기
        if (UnityEditor.Selection.activeGameObject == gameObject)
        {
            Gizmos.color = Color.green;
            Vector3 gridStartPos = gridCenter - new Vector3(gridWidth * cellSize / 2f, gridHeight * cellSize / 2f, 0f);

            // 세로 선들
            for (int x = 0; x <= gridWidth; x++)
            {
                Vector3 lineStart = gridStartPos + new Vector3(x * cellSize, 0, 0);
                Vector3 lineEnd = lineStart + new Vector3(0, gridHeight * cellSize, 0);
                Gizmos.DrawLine(lineStart, lineEnd);
            }

            // 가로 선들  
            for (int y = 0; y <= gridHeight; y++)
            {
                Vector3 lineStart = gridStartPos + new Vector3(0, y * cellSize, 0);
                Vector3 lineEnd = lineStart + new Vector3(gridWidth * cellSize, 0, 0);
                Gizmos.DrawLine(lineStart, lineEnd);
            }
        }
    }
#endif
}using UnityEngine;
using System.Collections.Generic;

public class PathManager : MonoBehaviour
{
    [Header("Path Settings")]
    public Material pathLineMaterial;
    public Color validPathColor = Color.green;
    public Color invalidPathColor = Color.red;
    public Color hoverPathColor = Color.yellow;

    private Dictionary<Player, List<Vector2Int>> playerPaths = new Dictionary<Player, List<Vector2Int>>();
    private Dictionary<Player, LineRenderer> pathRenderers = new Dictionary<Player, LineRenderer>();
    private Player selectedPlayer = null;
    private LineRenderer hoverLineRenderer;

    void Start()
    {
        Debug.Log("PathManager Start called!"); // 추가
        InitializePathManager();
    }

    void InitializePathManager()
    {

        // 모든 플레이어 찾기 및 초기화
        Player[] allPlayers = FindObjectsByType<Player>(FindObjectsSortMode.None);

        if (allPlayers.Length == 0)
        {
            return;
        }

        foreach (Player player in allPlayers)
        {
            playerPaths[player] = new List<Vector2Int>();

            // 각 플레이어별 LineRenderer 생성
            GameObject lineObj = new GameObject($"PathLine_{player.playerID}");
            lineObj.transform.SetParent(transform);

            LineRenderer lineRenderer = lineObj.AddComponent<LineRenderer>();
            SetupLineRenderer(lineRenderer, player.playerColor);
            pathRenderers[player] = lineRenderer;
        }

        // 호버링용 LineRenderer 생성
        GameObject hoverObj = new GameObject("HoverPathLine");
        hoverObj.transform.SetParent(transform);
        hoverLineRenderer = hoverObj.AddComponent<LineRenderer>();
        SetupLineRenderer(hoverLineRenderer, hoverPathColor);

    }

    void SetupLineRenderer(LineRenderer lr, Color color)
    {
        lr.material = pathLineMaterial; // 나중에 설정
        lr.startColor = color;  // color → startColor, endColor로 변경
        lr.endColor = color;
        lr.startWidth = 0.1f;
        lr.endWidth = 0.1f;
        lr.positionCount = 0;
        lr.sortingOrder = 1;
        lr.useWorldSpace = true;
    }


    // 플레이어 선택
    public void SelectPlayer(Player player)
    {
        selectedPlayer = player;

        // 기존 경로가 있다면 표시
        if (playerPaths.ContainsKey(player) && playerPaths[player].Count > 0)
        {
            ShowPlayerPath(player);
        }

        Debug.Log($"PathManager: Player {player.playerID} selected");
    }

    // 경로 추가
    public bool AddPathPoint(Vector2Int gridPos)
    {
        if (selectedPlayer == null) return false;

        List<Vector2Int> currentPath = playerPaths[selectedPlayer];

        // 중복 방지
        if (currentPath.Count > 0 && currentPath[currentPath.Count - 1] == gridPos)
            return false;

        // 선택 수 제한 체크
        int maxSelections = GameManager.Instance.GetMaxSelections();
        if (currentPath.Count >= maxSelections)
        {
            Debug.Log($"Maximum selections reached! ({maxSelections})");
            return false;
        }

        currentPath.Add(gridPos);
        ShowPlayerPath(selectedPlayer);

        Debug.Log($"Path point added: {gridPos}, Total: {currentPath.Count}");
        return true;
    }

    // 경로 시각화
    void ShowPlayerPath(Player player)
    {
        if (!pathRenderers.ContainsKey(player)) return;

        LineRenderer lr = pathRenderers[player];
        List<Vector2Int> path = playerPaths[player];

        if (path.Count == 0)
        {
            lr.positionCount = 0;
            return;
        }

        // 시작점부터 경로까지 연결
        List<Vector3> worldPositions = new List<Vector3>();
        worldPositions.Add(player.transform.position); // 현재 플레이어 위치

        foreach (Vector2Int gridPos in path)
        {
            Vector3 worldPos = GridManager.Instance.GridToWorld(gridPos);
            worldPositions.Add(worldPos);
        }

        lr.positionCount = worldPositions.Count;
        lr.SetPositions(worldPositions.ToArray());
    }

    // 호버링 경로 표시
    public void ShowHoverPath(Vector3 startPos, Vector3 endPos)
    {
        hoverLineRenderer.positionCount = 2;
        hoverLineRenderer.SetPosition(0, startPos);
        hoverLineRenderer.SetPosition(1, endPos);
    }

    // 호버링 경로 숨기기
    public void HideHoverPath()
    {
        hoverLineRenderer.positionCount = 0;
    }

    // 모든 경로 숨기기
    public void HideAllPaths()
    {
        foreach (var lr in pathRenderers.Values)
        {
            lr.positionCount = 0;
        }
    }

    // 플레이어별 최종 경로 반환
    public List<Vector2Int> GetPlayerPath(Player player)
    {
        if (playerPaths.ContainsKey(player))
            return new List<Vector2Int>(playerPaths[player]);
        return new List<Vector2Int>();
    }
}using UnityEngine;

public class GameManager : MonoBehaviour
{
    [Header("Game Settings")]
    public int maxSelectionsPerPlayer = 3;
    public int currentLevel = 1;

    [Header("Managers")]
    [SerializeField] private GridManager gridManager;
    [SerializeField] private PathManager pathManager;

    // 싱글톤 패턴
    private static GameManager instance;
    public static GameManager Instance { get { return instance; } }

    void Awake()
    {
        // 싱글톤 설정
        if (instance == null)
        {
            instance = this;
            DontDestroyOnLoad(gameObject);
            InitializeGame();
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void InitializeGame()
    {
        // 매니저들 자동 찾기
        if (gridManager == null)
            gridManager = FindFirstObjectByType<GridManager>();

        if (pathManager == null)
            pathManager = FindFirstObjectByType<PathManager>();
    }

    // 레벨별 선택 수 반환
    public int GetMaxSelections()
    {
        return maxSelectionsPerPlayer;
    }

    // 레벨 완료 처리
    public void CompleteLevel()
    {
        Debug.Log($"Level {currentLevel} completed!");
        // TODO: 다음 레벨 로딩, 별점 계산 등
    }

    // 레벨 실패 처리  
    public void FailLevel()
    {
        Debug.Log($"Level {currentLevel} failed!");
        // TODO: 재시작 UI 표시
    }

    // 게임 재시작
    public void RestartLevel()
    {
        Debug.Log("Restarting level...");
        // TODO: 레벨 리셋
    }
}